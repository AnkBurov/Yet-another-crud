/*
 * This file is generated by jOOQ.
*/
package io.github.crud.generated;


import io.github.crud.generated.tables.Dbupdate;
import io.github.crud.generated.tables.Funcrole;
import io.github.crud.generated.tables.Userinfo;
import io.github.crud.generated.tables.Userrole;
import io.github.crud.generated.tables.records.DbupdateRecord;
import io.github.crud.generated.tables.records.FuncroleRecord;
import io.github.crud.generated.tables.records.UserinfoRecord;
import io.github.crud.generated.tables.records.UserroleRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>yetanotherschema</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<DbupdateRecord, Integer> IDENTITY_DBUPDATE = Identities0.IDENTITY_DBUPDATE;
    public static final Identity<FuncroleRecord, Integer> IDENTITY_FUNCROLE = Identities0.IDENTITY_FUNCROLE;
    public static final Identity<UserinfoRecord, Integer> IDENTITY_USERINFO = Identities0.IDENTITY_USERINFO;
    public static final Identity<UserroleRecord, Integer> IDENTITY_USERROLE = Identities0.IDENTITY_USERROLE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DbupdateRecord> KEY_DBUPDATE_PRIMARY = UniqueKeys0.KEY_DBUPDATE_PRIMARY;
    public static final UniqueKey<DbupdateRecord> KEY_DBUPDATE_SCRIPTID_UNIQUE = UniqueKeys0.KEY_DBUPDATE_SCRIPTID_UNIQUE;
    public static final UniqueKey<FuncroleRecord> KEY_FUNCROLE_PRIMARY = UniqueKeys0.KEY_FUNCROLE_PRIMARY;
    public static final UniqueKey<FuncroleRecord> KEY_FUNCROLE_NAME_UNIQUE = UniqueKeys0.KEY_FUNCROLE_NAME_UNIQUE;
    public static final UniqueKey<UserinfoRecord> KEY_USERINFO_PRIMARY = UniqueKeys0.KEY_USERINFO_PRIMARY;
    public static final UniqueKey<UserinfoRecord> KEY_USERINFO_EMAIL_UNIQUE = UniqueKeys0.KEY_USERINFO_EMAIL_UNIQUE;
    public static final UniqueKey<UserroleRecord> KEY_USERROLE_PRIMARY = UniqueKeys0.KEY_USERROLE_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<UserroleRecord, UserinfoRecord> FK_USER = ForeignKeys0.FK_USER;
    public static final ForeignKey<UserroleRecord, FuncroleRecord> FK_FUNCROLE = ForeignKeys0.FK_FUNCROLE;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<DbupdateRecord, Integer> IDENTITY_DBUPDATE = createIdentity(Dbupdate.DBUPDATE, Dbupdate.DBUPDATE.ID);
        public static Identity<FuncroleRecord, Integer> IDENTITY_FUNCROLE = createIdentity(Funcrole.FUNCROLE, Funcrole.FUNCROLE.ID);
        public static Identity<UserinfoRecord, Integer> IDENTITY_USERINFO = createIdentity(Userinfo.USERINFO, Userinfo.USERINFO.ID);
        public static Identity<UserroleRecord, Integer> IDENTITY_USERROLE = createIdentity(Userrole.USERROLE, Userrole.USERROLE.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<DbupdateRecord> KEY_DBUPDATE_PRIMARY = createUniqueKey(Dbupdate.DBUPDATE, "KEY_DBUPDATE_PRIMARY", Dbupdate.DBUPDATE.ID);
        public static final UniqueKey<DbupdateRecord> KEY_DBUPDATE_SCRIPTID_UNIQUE = createUniqueKey(Dbupdate.DBUPDATE, "KEY_DBUPDATE_SCRIPTID_UNIQUE", Dbupdate.DBUPDATE.SCRIPTID);
        public static final UniqueKey<FuncroleRecord> KEY_FUNCROLE_PRIMARY = createUniqueKey(Funcrole.FUNCROLE, "KEY_FUNCROLE_PRIMARY", Funcrole.FUNCROLE.ID);
        public static final UniqueKey<FuncroleRecord> KEY_FUNCROLE_NAME_UNIQUE = createUniqueKey(Funcrole.FUNCROLE, "KEY_FUNCROLE_NAME_UNIQUE", Funcrole.FUNCROLE.NAME);
        public static final UniqueKey<UserinfoRecord> KEY_USERINFO_PRIMARY = createUniqueKey(Userinfo.USERINFO, "KEY_USERINFO_PRIMARY", Userinfo.USERINFO.ID);
        public static final UniqueKey<UserinfoRecord> KEY_USERINFO_EMAIL_UNIQUE = createUniqueKey(Userinfo.USERINFO, "KEY_USERINFO_EMAIL_UNIQUE", Userinfo.USERINFO.EMAIL);
        public static final UniqueKey<UserroleRecord> KEY_USERROLE_PRIMARY = createUniqueKey(Userrole.USERROLE, "KEY_USERROLE_PRIMARY", Userrole.USERROLE.ID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<UserroleRecord, UserinfoRecord> FK_USER = createForeignKey(io.github.crud.generated.Keys.KEY_USERINFO_PRIMARY, Userrole.USERROLE, "FK_USER", Userrole.USERROLE.USERID);
        public static final ForeignKey<UserroleRecord, FuncroleRecord> FK_FUNCROLE = createForeignKey(io.github.crud.generated.Keys.KEY_FUNCROLE_NAME_UNIQUE, Userrole.USERROLE, "FK_FUNCROLE", Userrole.USERROLE.FUNCROLE);
    }
}
