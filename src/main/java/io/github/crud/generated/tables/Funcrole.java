/*
 * This file is generated by jOOQ.
*/
package io.github.crud.generated.tables;


import io.github.crud.generated.Keys;
import io.github.crud.generated.Yetanotherschema;
import io.github.crud.generated.tables.records.FuncroleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Funcrole extends TableImpl<FuncroleRecord> {

    private static final long serialVersionUID = 1819885083;

    /**
     * The reference instance of <code>yetanotherschema.FUNCROLE</code>
     */
    public static final Funcrole FUNCROLE = new Funcrole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FuncroleRecord> getRecordType() {
        return FuncroleRecord.class;
    }

    /**
     * The column <code>yetanotherschema.FUNCROLE.ID</code>.
     */
    public final TableField<FuncroleRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>yetanotherschema.FUNCROLE.NAME</code>.
     */
    public final TableField<FuncroleRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

    /**
     * Create a <code>yetanotherschema.FUNCROLE</code> table reference
     */
    public Funcrole() {
        this("FUNCROLE", null);
    }

    /**
     * Create an aliased <code>yetanotherschema.FUNCROLE</code> table reference
     */
    public Funcrole(String alias) {
        this(alias, FUNCROLE);
    }

    private Funcrole(String alias, Table<FuncroleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Funcrole(String alias, Table<FuncroleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Yetanotherschema.YETANOTHERSCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FuncroleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FUNCROLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FuncroleRecord> getPrimaryKey() {
        return Keys.KEY_FUNCROLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FuncroleRecord>> getKeys() {
        return Arrays.<UniqueKey<FuncroleRecord>>asList(Keys.KEY_FUNCROLE_PRIMARY, Keys.KEY_FUNCROLE_NAME_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Funcrole as(String alias) {
        return new Funcrole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Funcrole rename(String name) {
        return new Funcrole(name, null);
    }
}
