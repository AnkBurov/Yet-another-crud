/*
 * This file is generated by jOOQ.
*/
package io.github.crud.generated.tables;


import io.github.crud.generated.Keys;
import io.github.crud.generated.Yetanotherschema;
import io.github.crud.generated.tables.records.UserroleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userrole extends TableImpl<UserroleRecord> {

    private static final long serialVersionUID = -54496991;

    /**
     * The reference instance of <code>yetanotherschema.USERROLE</code>
     */
    public static final Userrole USERROLE = new Userrole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserroleRecord> getRecordType() {
        return UserroleRecord.class;
    }

    /**
     * The column <code>yetanotherschema.USERROLE.ID</code>.
     */
    public final TableField<UserroleRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>yetanotherschema.USERROLE.USERID</code>.
     */
    public final TableField<UserroleRecord, Integer> USERID = createField("USERID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>yetanotherschema.USERROLE.FUNCROLE</code>.
     */
    public final TableField<UserroleRecord, String> FUNCROLE = createField("FUNCROLE", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

    /**
     * Create a <code>yetanotherschema.USERROLE</code> table reference
     */
    public Userrole() {
        this("USERROLE", null);
    }

    /**
     * Create an aliased <code>yetanotherschema.USERROLE</code> table reference
     */
    public Userrole(String alias) {
        this(alias, USERROLE);
    }

    private Userrole(String alias, Table<UserroleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Userrole(String alias, Table<UserroleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Yetanotherschema.YETANOTHERSCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserroleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USERROLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserroleRecord> getPrimaryKey() {
        return Keys.KEY_USERROLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserroleRecord>> getKeys() {
        return Arrays.<UniqueKey<UserroleRecord>>asList(Keys.KEY_USERROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserroleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserroleRecord, ?>>asList(Keys.FK_USER, Keys.FK_FUNCROLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Userrole as(String alias) {
        return new Userrole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userrole rename(String name) {
        return new Userrole(name, null);
    }
}
