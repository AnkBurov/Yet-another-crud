/*
 * This file is generated by jOOQ.
*/
package io.github.crud.generated.tables;


import io.github.crud.generated.Keys;
import io.github.crud.generated.Yetanotherschema;
import io.github.crud.generated.tables.records.DbupdateRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dbupdate extends TableImpl<DbupdateRecord> {

    private static final long serialVersionUID = -1691132186;

    /**
     * The reference instance of <code>yetanotherschema.DBUPDATE</code>
     */
    public static final Dbupdate DBUPDATE = new Dbupdate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbupdateRecord> getRecordType() {
        return DbupdateRecord.class;
    }

    /**
     * The column <code>yetanotherschema.DBUPDATE.ID</code>.
     */
    public final TableField<DbupdateRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>yetanotherschema.DBUPDATE.SCRIPTID</code>.
     */
    public final TableField<DbupdateRecord, Integer> SCRIPTID = createField("SCRIPTID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>yetanotherschema.DBUPDATE.AUTHOR</code>.
     */
    public final TableField<DbupdateRecord, String> AUTHOR = createField("AUTHOR", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

    /**
     * The column <code>yetanotherschema.DBUPDATE.SCRIPTNAME</code>.
     */
    public final TableField<DbupdateRecord, String> SCRIPTNAME = createField("SCRIPTNAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>yetanotherschema.DBUPDATE</code> table reference
     */
    public Dbupdate() {
        this("DBUPDATE", null);
    }

    /**
     * Create an aliased <code>yetanotherschema.DBUPDATE</code> table reference
     */
    public Dbupdate(String alias) {
        this(alias, DBUPDATE);
    }

    private Dbupdate(String alias, Table<DbupdateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dbupdate(String alias, Table<DbupdateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Yetanotherschema.YETANOTHERSCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DbupdateRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DBUPDATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DbupdateRecord> getPrimaryKey() {
        return Keys.KEY_DBUPDATE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DbupdateRecord>> getKeys() {
        return Arrays.<UniqueKey<DbupdateRecord>>asList(Keys.KEY_DBUPDATE_PRIMARY, Keys.KEY_DBUPDATE_SCRIPTID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dbupdate as(String alias) {
        return new Dbupdate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dbupdate rename(String name) {
        return new Dbupdate(name, null);
    }
}
